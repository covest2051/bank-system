version: "3.7"

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
  kafka-data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:8.2.3
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:8.2.3
    container_name: kafka
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server kafka:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - kafka

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    networks:
      - backend
    environment:
      POSTGRES_DB: bank
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  service-client-processing:
    build:
      context: ./service-client-processing
      dockerfile: Dockerfile
    container_name: service-client-processing
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      - postgres
      - kafka

  service-account-processing:
    build:
      context: ./service-account-processing
      dockerfile: Dockerfile
    container_name: service-account-processing
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      - postgres
      - kafka

  service-credit-processing:
    build:
      context: ./service-credit-processing
      dockerfile: Dockerfile
    container_name: service-credit-processing
    restart: unless-stopped
    networks:
      - backend
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bank
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      - postgres
      - kafka
